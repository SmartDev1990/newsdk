{"code":"import { ONE, TWO, ZERO } from '../constants/numbers';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER);\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value) {\r\n    invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE');\r\n    // rely on built in sqrt if possible\r\n    if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n        return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));\r\n    }\r\n    let z;\r\n    let x;\r\n    z = value;\r\n    x = JSBI.add(JSBI.divide(value, TWO), ONE);\r\n    while (JSBI.lessThan(x, z)) {\r\n        z = x;\r\n        x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);\r\n    }\r\n    return z;\r\n}\r\n/**\r\n * Returns the smallest member of the array\r\n * @param values the values from which the smallest gets returned\r\n * @returns the smallest memmber of the array\r\n */\r\nexport function minimum(...values) {\r\n    let lowest = values[0];\r\n    for (let i = 1; i < values.length; i++) {\r\n        const value = values[i];\r\n        if (JSBI.LT(value, lowest)) {\r\n            lowest = value;\r\n        }\r\n    }\r\n    return lowest;\r\n}\r\n/**\r\n * Returns the biggest member of the array\r\n * @param values the values from which the biggest gets returned\r\n * @returns the biggest memmber of the array\r\n */\r\nexport function maximum(...values) {\r\n    let highest = values[0];\r\n    for (let i = 1; i < values.length; i++) {\r\n        const value = values[i];\r\n        if (JSBI.GT(value, highest)) {\r\n            highest = value;\r\n        }\r\n    }\r\n    return highest;\r\n}\r\nexport function difference(a, b) {\r\n    if (JSBI.greaterThan(a, b)) {\r\n        return JSBI.subtract(a, b);\r\n    }\r\n    return JSBI.subtract(b, a);\r\n}\r\n//# sourceMappingURL=math.js.map","references":["D:/360/quickswap/newsdk/src/constants/numbers.ts","D:/360/quickswap/newsdk/node_modules/jsbi/jsbi.d.ts","D:/360/quickswap/newsdk/node_modules/tiny-invariant/dist/tiny-invariant.d.ts"],"map":"{\"version\":3,\"file\":\"math.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/functions/math.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAA;AAErD,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,OAAO,SAAS,MAAM,gBAAgB,CAAA;AAEtC,MAAM,CAAC,MAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAA;AAEpE;;;GAGG;AACH,MAAM,UAAU,IAAI,CAAC,KAAW;IAC9B,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,UAAU,CAAC,CAAA;IAE3D,oCAAoC;IACpC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,gBAAgB,CAAC,EAAE;QAC1C,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;KAChE;IAED,IAAI,CAAO,CAAA;IACX,IAAI,CAAO,CAAA;IACX,CAAC,GAAG,KAAK,CAAA;IACT,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAA;IAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QAC1B,CAAC,GAAG,CAAC,CAAA;QACL,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;KACzD;IACD,OAAO,CAAC,CAAA;AACV,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,OAAO,CAAC,GAAG,MAAc;IACvC,IAAI,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;IACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;QACvB,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;YAC1B,MAAM,GAAG,KAAK,CAAA;SACf;KACF;IACD,OAAO,MAAM,CAAA;AACf,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,OAAO,CAAC,GAAG,MAAc;IACvC,IAAI,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;IACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;QACvB,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE;YAC3B,OAAO,GAAG,KAAK,CAAA;SAChB;KACF;IACD,OAAO,OAAO,CAAA;AAChB,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,CAAO,EAAE,CAAO;IACzC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;KAC3B;IACD,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAC5B,CAAC\"}","dts":{"name":"D:/360/quickswap/newsdk/functions/math.d.ts","writeByteOrderMark":false,"text":"import JSBI from 'jsbi';\r\nexport declare const MAX_SAFE_INTEGER: JSBI;\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport declare function sqrt(value: JSBI): JSBI;\r\n/**\r\n * Returns the smallest member of the array\r\n * @param values the values from which the smallest gets returned\r\n * @returns the smallest memmber of the array\r\n */\r\nexport declare function minimum(...values: JSBI[]): JSBI;\r\n/**\r\n * Returns the biggest member of the array\r\n * @param values the values from which the biggest gets returned\r\n * @returns the biggest memmber of the array\r\n */\r\nexport declare function maximum(...values: JSBI[]): JSBI;\r\nexport declare function difference(a: JSBI, b: JSBI): JSBI;\r\n"}}
