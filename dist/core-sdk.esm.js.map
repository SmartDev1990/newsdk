{"version":3,"file":"core-sdk.esm.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/SolidityType.ts","../src/enums/TradeType.ts","../src/enums/TradeVersion.ts","../src/constants/addresses.ts","../src/constants/chain.ts","../src/constants/legacy.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Bitgert.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Matic.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/solidity.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts","../src/router.ts"],"sourcesContent":["export enum ChainId {\r\n  ETHEREUM = 1,\r\n  BITGERT = 32520,\r\n  MATIC = 137,\r\n  MATIC_TESTNET = 80001,\r\n  BSC = 56,\r\n  BSC_TESTNET = 97,\r\n}\r\n","export enum ChainKey {\r\n  BSC = 'bsc',\r\n  BSC_TESTNET = 'bsc-testnet',\r\n  ETHEREUM = 'ethereum',\r\n  BITGERT = 'bitgert',\r\n  MATIC = 'polygon',\r\n  MATIC_TESTNET = 'matic-testnet',\r\n}\r\n","export enum Rounding {\r\n  ROUND_DOWN = 0,\r\n  ROUND_HALF_UP = 1,\r\n  ROUND_UP = 3,\r\n}\r\n","export enum SolidityType {\r\n    uint8 = 'uint8',\r\n    uint256 = 'uint256',\r\n}","export enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT,\r\n}\r\n","export enum TradeVersion {\r\n  V2TRADE,\r\n  V3TRADE,\r\n}\r\n","import { AddressMap } from '../types'\r\nimport { ChainId } from '../enums'\r\n\r\nexport const SUSHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '',\r\n  [ChainId.BITGERT]: '0x1eb697Cb6F457F6a65C682F7f7c65F9f2E622A34',\r\n  [ChainId.MATIC]: '',\r\n  [ChainId.BSC]: '',\r\n}\r\n\r\nexport const RICE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '',\r\n  [ChainId.BITGERT]: '0x1eb697Cb6F457F6a65C682F7f7c65F9f2E622A34',\r\n  [ChainId.MATIC]: '',\r\n  [ChainId.BSC]: '',\r\n}\r\n\r\nexport const XRICE_ADDRESS: AddressMap = {\r\n  [ChainId.BITGERT]: '0x722f5f012D29Cc4d6464B6a46343fBA3881eaa56',\r\n}\r\n\r\nexport const USDC_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\r\n  [ChainId.BITGERT]: '0xcf2DF9377A4e3C10e9EA29fDB8879d74C27FCDE7',\r\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\r\n}\r\n\r\nexport const USD_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: USDC_ADDRESS[ChainId.ETHEREUM],\r\n  [ChainId.BITGERT]: USDC_ADDRESS[ChainId.BITGERT],\r\n  [ChainId.MATIC]: USDC_ADDRESS[ChainId.MATIC],\r\n  [ChainId.BSC]: USDC_ADDRESS[ChainId.BSC],\r\n}\r\n\r\nexport const WETH9_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n  [ChainId.BITGERT]: '0x0eb9036cbE0f052386f36170c6b07eF0a0E3f710',\r\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n}\r\n\r\nexport const WNATIVE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: WETH9_ADDRESS[ChainId.ETHEREUM],\r\n  [ChainId.BITGERT]: WETH9_ADDRESS[ChainId.BITGERT],\r\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\r\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n}\r\n\r\nexport const DAI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\r\n  [ChainId.BITGERT]: '0x5d8CEEf69160a9692471670D5f7147157656fF46',\r\n  [ChainId.MATIC]: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\r\n  [ChainId.BSC]: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\r\n}\r\n\r\nexport const USDT_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\r\n  [ChainId.BITGERT]: '0xDe14b85cf78F2ADd2E867FEE40575437D5f10c06',\r\n  [ChainId.MATIC]: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\r\n  [ChainId.BSC]: '0x55d398326f99059fF775485246999027B3197955',\r\n}\r\n\r\nexport const MIM_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3',\r\n  [ChainId.BITGERT]: '0x4603aC7a1fdf9BdEf680C818A92874Db66900C94',\r\n  [ChainId.BSC]: '0xfE19F0B51438fd612f6FD59C1dbB3eA319f433Ba',\r\n  [ChainId.MATIC]: '0x49a0400587A7F65072c87c4910449fDcC5c47242',\r\n}\r\n\r\nexport const FRAX_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x853d955aCEf822Db058eb8505911ED77F175b99e',\r\n  [ChainId.BITGERT]: '',\r\n  [ChainId.BSC]: '0x90C97F71E18723b0Cf0dfa30ee176Ab653E89F40',\r\n  [ChainId.MATIC]: '0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89',\r\n}\r\n\r\nexport const FACTORY_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\r\n  [ChainId.BITGERT]: '0xb5AFBC6F9CC06a3CC3403eCae0957E153c7dad5C',\r\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n}\r\n\r\nexport const ROUTER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\r\n  [ChainId.BITGERT]: '0x5635149e37007885017eb8c92EfD79F02747b1dF',\r\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n}\r\n\r\nexport const MASTERCHEF_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n  [ChainId.BITGERT]: '0x338c63fa6Df4B6C35158894343a22E8c1cec5D0a',\r\n}\r\n\r\nexport const BAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\r\n  [ChainId.BITGERT]: '',\r\n}\r\n\r\nexport const MAKER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\r\n  [ChainId.BITGERT]: '',\r\n}\r\n\r\nexport const TIMELOCK_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\r\n  [ChainId.BITGERT]: '0x936e1d1bfc2547544a4d28d3d8ce66280e6be6c3',\r\n}\r\n\r\nexport const BENTOBOX_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.BITGERT]: '0x7489907896a65dcccb79c95bd4a00f7e922b8652',\r\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\r\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n}\r\n\r\nexport const KASHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.BITGERT]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n}\r\n\r\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.BITGERT]: '0xf441ca6ed0c071adaa58a89dd9b6cf5a04b9af10',\r\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\r\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\r\n}\r\n\r\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\r\n  [ChainId.BITGERT]: '0xd7a2043d18a1ce4301f2ebc7fa2741a56cd9de7e',\r\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\r\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\r\n}\r\n\r\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.BITGERT]: '0x71c8ebeda911af79a3fb01655aa4e3c1c31a4525',\r\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\r\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\r\n}\r\n\r\nexport const PEGGED_ORACLE_ADDRESS = ''\r\n\r\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = ''\r\n\r\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = ''\r\n\r\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.BITGERT]: '',\r\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n}\r\n\r\nexport const BORING_HELPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.BITGERT]: '',\r\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\r\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n}\r\n\r\nexport const MINICHEF_ADDRESS: AddressMap = {\r\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n}\r\n\r\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\r\n  [ChainId.BITGERT]: '',\r\n}\r\n\r\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.BITGERT]: '',\r\n}\r\n\r\nexport const ZAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\r\n  [ChainId.BITGERT]: '',\r\n}\r\n\r\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\r\n  [ChainId.BITGERT]: '',\r\n}\r\n\r\nexport const MULTICALL2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.BITGERT]: '0x3AFd2494833cbB234B363440E65BC2A171Dbb267',\r\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\r\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\r\n}\r\n\r\nexport const BALANCE_FETCHER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x386a4B75578C7843A6082EFe181D5d629236C047',\r\n  [ChainId.BITGERT]: '0xfb9d2a104789563cac593771b4f854c6495b7bef',\r\n  [ChainId.MATIC]: '0x06a846BA430Ed005bE60f8598B4C563dbaa6feF0',\r\n  [ChainId.BSC]: '0x9d6c13Bc5269E553C4697767b4c267FB33Dd8d1A',\r\n}\r\n\r\nexport const MULTISIG_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x19B3Eb3Af5D93b77a5619b047De0EED7115A19e7',\r\n  [ChainId.BITGERT]: '',\r\n  [ChainId.MATIC]: '0x850a57630A2012B2494779fBc86bBc24F2a7baeF',\r\n  [ChainId.BSC]: '0xc6fD91aD4919Fd91e2c84077ba648092cB499638',\r\n}\r\n","import { ChainId } from '../enums'\r\nimport { ChainKey } from '../enums'\r\n\r\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\r\n  [ChainId.ETHEREUM]: ChainKey.ETHEREUM,\r\n  [ChainId.BITGERT]: ChainKey.BITGERT,\r\n  [ChainId.MATIC]: ChainKey.MATIC,\r\n  [ChainId.MATIC_TESTNET]: ChainKey.MATIC_TESTNET,\r\n  [ChainId.BSC]: ChainKey.BSC,\r\n  [ChainId.BSC_TESTNET]: ChainKey.BSC_TESTNET,\r\n}\r\n","import { ChainId } from '../enums/ChainId'\r\n\r\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\r\n  [ChainId.ETHEREUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BITGERT]: '0xd12a2c7423c2978ecc6469106ef79ce752a73ffee356ddc84f092521a99bfb94',\r\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class AbstractCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean\r\n  /**\r\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.chainId = chainId\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean\r\n\r\n  /**\r\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\r\n   * implement this to be used in Uniswap\r\n   */\r\n  public abstract get wrapped(): Token\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport abstract class NativeCurrency extends AbstractCurrency {\r\n  public readonly isNative: true = true\r\n  public readonly isToken: false = false\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\nimport invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\nimport { Currency } from './Currency'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends AbstractCurrency {\r\n  public readonly chainId: number\r\n  public readonly address: string\r\n\r\n  public readonly isNative: false = false\r\n  public readonly isToken: true = true\r\n\r\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(chainId, decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return logo\r\n   */\r\n  // public get logo(): string | null {\r\n  //   return this.chainId in CHAIN_KEY ? `https://raw.githubusercontent.com/sushiswap/logos/main/network/${CHAIN_KEY[this.chainId]}/.jpg` : undefined\r\n  // }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n","import { ChainTokenMap, TokenMap } from '../types'\r\nimport { RICE_ADDRESS, SUSHI_ADDRESS, USDC_ADDRESS, USD_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\r\n\r\nimport { ChainId } from '../enums'\r\nimport { Token } from '../entities/Token'\r\n\r\nexport const USDC: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, USDC_ADDRESS[ChainId.ETHEREUM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.BITGERT]: new Token(ChainId.BITGERT, USDC_ADDRESS[ChainId.BITGERT], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MATIC_TESTNET]: new Token(ChainId.MATIC_TESTNET, USDC_ADDRESS[ChainId.MATIC_TESTNET], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\r\n}\r\n\r\nexport const USD: TokenMap = {\r\n  ...USDC,\r\n  [ChainId.BITGERT]: new Token(ChainId.BITGERT, USDC_ADDRESS[ChainId.BITGERT], 6, 'USDC', 'USD Coin'),\r\n}\r\n\r\nexport const WNATIVE: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, WNATIVE_ADDRESS[ChainId.ETHEREUM], 18, 'WETH', 'Wrapped Ethereum'),\r\n  [ChainId.BITGERT]: new Token(ChainId.BITGERT, WNATIVE_ADDRESS[ChainId.BITGERT], 18, 'WBRISE', 'Wrapped Brise'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\r\n    18,\r\n    'WMATIC',\r\n    'Wrapped Matic'\r\n  ),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\r\n  [ChainId.BSC_TESTNET]: new Token(\r\n    ChainId.BSC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB'\r\n  ),\r\n}\r\n\r\nexport const RICE: ChainTokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, SUSHI_ADDRESS[ChainId.ETHEREUM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.BITGERT]: new Token(ChainId.BITGERT, RICE_ADDRESS[ChainId.BITGERT], 18, 'RICE', 'RiceToken'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, SUSHI_ADDRESS[ChainId.MATIC], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, SUSHI_ADDRESS[ChainId.BSC], 18, 'SUSHI', 'SushiToken'),\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Bitgert extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'BRISE', 'Brise Coin')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Bitgert } = {}\r\n\r\n  public static onChain(chainId: number): Bitgert {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Bitgert(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Binance extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'BNB', 'Binance Coin')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Binance } = {}\r\n\r\n  public static onChain(chainId: number): Binance {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\r\nexport class Ether extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ETH', 'Ether')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _etherCache: { [chainId: number]: Ether } = {}\r\n\r\n  public static onChain(chainId: number): Ether {\r\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Matic extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MATIC', 'Matic')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Matic } = {}\r\n\r\n  public static onChain(chainId: number): Matic {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import {\r\n  Bitgert,\r\n  Binance,\r\n  Ether,\r\n  Matic,\r\n} from '../entities/Native'\r\n\r\nimport { ChainId } from '../enums'\r\nimport { NativeMap } from '../types'\r\n\r\nexport const NATIVE: NativeMap = {\r\n  [ChainId.ETHEREUM]: Ether.onChain(ChainId.ETHEREUM),\r\n  [ChainId.BITGERT]: Bitgert.onChain(ChainId.BITGERT),\r\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\r\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\r\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\r\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)","import JSBI from 'jsbi'\r\nimport { SolidityType } from \"../enums/SolidityType\";\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\r\n}","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import _Big, { RoundingMode } from 'big.js'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport _Decimal from 'decimal.js-light'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({\r\n      precision: significantDigits + 1,\r\n      rounding: toSignificantRounding[rounding],\r\n    })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { MaxUint256 } from '../constants'\r\nimport { Rounding } from '../enums'\r\nimport { Token } from './Token'\r\nimport _Big from 'big.js'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\r\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of the address and currency amount.\r\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\r\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\r\n   */\r\n  public serialize(): string {\r\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [\r\n          {\r\n            baseAmount: CurrencyAmount<TBase>\r\n            quoteAmount: CurrencyAmount<TQuote>\r\n          }\r\n        ]\r\n  ) {\r\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\r\n\r\n    if (args.length === 4) {\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator,\r\n      ]\r\n    }\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { keccak256, pack } from '@ethersproject/solidity'\r\n\r\nimport { INIT_CODE_HASH } from '../constants'\r\nimport { Token } from '../entities/Token'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nexport const computePairAddress = ({\r\n  factoryAddress,\r\n  tokenA,\r\n  tokenB,\r\n}: {\r\n  factoryAddress: string\r\n  tokenA: Token\r\n  tokenB: Token\r\n}): string => {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n  return getCreate2Address(\r\n    factoryAddress,\r\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n    INIT_CODE_HASH[token0.chainId]\r\n  )\r\n}\r\n","import { ONE, TWO, ZERO } from '../constants/numbers'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n\r\n/**\r\n * Returns the smallest member of the array\r\n * @param values the values from which the smallest gets returned\r\n * @returns the smallest memmber of the array\r\n */\r\nexport function minimum(...values: JSBI[]): JSBI {\r\n  let lowest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.LT(value, lowest)) {\r\n      lowest = value\r\n    }\r\n  }\r\n  return lowest\r\n}\r\n\r\n/**\r\n * Returns the biggest member of the array\r\n * @param values the values from which the biggest gets returned\r\n * @returns the biggest memmber of the array\r\n */\r\nexport function maximum(...values: JSBI[]): JSBI {\r\n  let highest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.GT(value, highest)) {\r\n      highest = value\r\n    }\r\n  }\r\n  return highest\r\n}\r\n\r\nexport function difference(a: JSBI, b: JSBI): JSBI {\r\n  if (JSBI.greaterThan(a, b)) {\r\n    return JSBI.subtract(a, b)\r\n  }\r\n  return JSBI.subtract(b, a)\r\n}\r\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\r\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport JSBI from 'jsbi'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport { computePairAddress } from '../functions/computePairAddress'\r\nimport invariant from 'tiny-invariant'\r\nimport { sqrt } from '../functions/math'\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    return computePairAddress({\r\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\r\n      tokenA,\r\n      tokenB,\r\n    })\r\n  }\r\n\r\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\r\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\r\n      ? [currencyAmountA, currencyAmountB]\r\n      : [currencyAmountB, currencyAmountA]\r\n    this.liquidityToken = new Token(\r\n      currencyAmounts[0].currency.chainId,\r\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\r\n      18,\r\n      'RICE-V2',\r\n      'Riceswap V2'\r\n    )\r\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\r\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\r\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): number {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].currency\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].currency\r\n  }\r\n\r\n  public get reserve0(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.currency)\r\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\r\n    const outputAmount = CurrencyAmount.fromRawAmount(\r\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.currency)\r\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\r\n    const inputAmount = CurrencyAmount.fromRawAmount(\r\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: CurrencyAmount<Token>,\r\n    tokenAmountA: CurrencyAmount<Token>,\r\n    tokenAmountB: CurrencyAmount<Token>\r\n  ): CurrencyAmount<Token> {\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n      liquidity = JSBI.subtract(\r\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\r\n        MINIMUM_LIQUIDITY\r\n      )\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n\r\n      console.log({\r\n        amount0: amount0.toString(),\r\n        amount1: amount1.toString(),\r\n        liquidity: liquidity.toString(),\r\n        totalSupply: totalSupply.quotient.toString(),\r\n        kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\r\n      })\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: CurrencyAmount<Token>,\r\n    liquidity: CurrencyAmount<Token>,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: CurrencyAmount<Token>\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = JSBI.BigInt(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\r\n    )\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Pair } from './Pair'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: TInput\r\n  public readonly output: TOutput\r\n\r\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    const chainId: number = pairs[0].chainId\r\n    invariant(\r\n      pairs.every((pair) => pair.chainId === chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n\r\n    const wrappedInput = input.wrapped\r\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\r\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\r\n\r\n    const path: Token[] = [wrappedInput]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.input = input\r\n    this.output = output\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null\r\n\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice\r\n    const prices: Price<Currency, Currency>[] = []\r\n    for (const [i, pair] of this.pairs.entries()) {\r\n      prices.push(\r\n        this.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\r\n      )\r\n    }\r\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\r\n  }\r\n\r\n  public get chainId(): number {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Currency } from '../entities/Currency'\r\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\r\nimport { Percent } from '../entities/Percent'\r\nimport { Price } from '../entities/Price'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { ONE, ZERO } from '../constants'\r\n\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport { Pair } from './Pair'\r\nimport { Percent } from './Percent'\r\nimport { Price } from './Price'\r\nimport { Route } from './Route'\r\nimport { Token } from './Token'\r\nimport { TradeType } from '../enums/TradeType'\r\nimport { computePriceImpact } from '../functions/computePriceImpact'\r\nimport invariant from 'tiny-invariant'\r\nimport { sortedInsert } from '../functions/sortedInsert'\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\r\n  readonly inputAmount: CurrencyAmount<TInput>\r\n  readonly outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\r\n  a: InputOutput<TInput, TOutput>,\r\n  b: InputOutput<TInput, TOutput>\r\n): number {\r\n  // must have same input and output token for comparison\r\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>\r\n) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\r\n   */\r\n  public readonly route: Route<TInput, TOutput>\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount<TInput>\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount<TOutput>\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType\r\n  ) {\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n\r\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(amount.currency.equals(route.input), 'INPUT')\r\n      tokenAmounts[0] = amount.wrapped\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\r\n        tokenAmounts[i + 1] = outputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.output,\r\n        tokenAmounts[tokenAmounts.length - 1].numerator,\r\n        tokenAmounts[tokenAmounts.length - 1].denominator\r\n      )\r\n    } else {\r\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\r\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\r\n        tokenAmounts[i - 1] = inputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.input,\r\n        tokenAmounts[0].numerator,\r\n        tokenAmounts[0].denominator\r\n      )\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\r\n    }\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.quotient,\r\n      this.outputAmount.quotient\r\n    )\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .multiply(this.inputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: TOutput,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountIn = nextAmountIn.wrapped\r\n    const tokenOut = currencyOut.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.currency.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\r\n            currencyAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          currencyAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [...currentPairs, pair],\r\n          amountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */\r\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\r\n    return new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.maximumAmountIn(slippageTolerance).quotient,\r\n      this.minimumAmountOut(slippageTolerance).quotient\r\n    )\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyIn: TInput,\r\n    currencyAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountOut = nextAmountOut.wrapped\r\n    const tokenIn = currencyIn.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.currency.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\r\n            currencyAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          currencyAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [pair, ...currentPairs],\r\n          amountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { ONE, ZERO } from '../constants'\r\nimport { Rebase } from '../interfaces'\r\n\r\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\r\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\r\n}\r\n\r\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\r\n  let elastic: JSBI\r\n  if (JSBI.equal(total.base, ZERO)) {\r\n    elastic = base\r\n  } else {\r\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\r\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\r\n      elastic = JSBI.add(elastic, ONE)\r\n    }\r\n  }\r\n\r\n  return elastic\r\n}\r\n","import { SOLIDITY_TYPE_MAXIMA, ZERO } from '../constants'\r\nimport { SolidityType } from '../enums'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n","import { Currency } from './entities/Currency'\r\nimport { CurrencyAmount } from './entities/CurrencyAmount'\r\nimport { Percent } from './entities/Percent'\r\nimport { Token } from './entities/Token'\r\nimport { Trade } from './entities/Trade'\r\nimport { TradeType } from './enums/TradeType'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\r\n  return `0x${currencyAmount.quotient.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade<Currency, Currency, TradeType>,\r\n    options: TradeOptions | TradeOptionsDeadline\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency.isNative\r\n    const etherOut = trade.outputAmount.currency.isNative\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value,\r\n    }\r\n  }\r\n}\r\n"],"names":["ChainId","ChainKey","Rounding","SolidityType","TradeType","TradeVersion","SUSHI_ADDRESS","ETHEREUM","BITGERT","MATIC","BSC","RICE_ADDRESS","XRICE_ADDRESS","USDC_ADDRESS","USD_ADDRESS","WETH9_ADDRESS","WNATIVE_ADDRESS","BSC_TESTNET","DAI_ADDRESS","USDT_ADDRESS","MIM_ADDRESS","FRAX_ADDRESS","FACTORY_ADDRESS","MATIC_TESTNET","ROUTER_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","MULTICALL2_ADDRESS","BALANCE_FETCHER_ADDRESS","MULTISIG_ADDRESS","CHAIN_KEY","INIT_CODE_HASH","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","NativeCurrency","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","equals","other","isToken","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","USDC","USD","WNATIVE","RICE","Bitgert","onChain","_cache","isNative","wnative","Binance","Ether","_etherCache","Matic","NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","serialize","wrapped","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","token0","token1","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","minimum","lowest","i","LT","maximum","highest","GT","difference","a","b","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","getSigner","library","account","connectUnchecked","getProviderOrSigner","rebase","from","to","toElastic","total","base","roundUp","elastic","validateSolidityTypeInstance","solidityType","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName"],"mappings":"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"}